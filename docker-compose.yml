version: '3.8'

# this docker script loads every dependency backend (api) has, to run and test in local

services:

  postgresql:
    image: postgres:16
    container_name: ldcgc-db
    restart: always
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=mydb
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5434:5432"
    networks:
      - api_db_network
    volumes:
      - postgresql:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U myuser -d mydb" ]
      interval: 10s
      timeout: 3s
      retries: 3

  maildev:
    image: maildev/maildev
    container_name: ldcgc-smtp
    environment:
      - MAILDEV_INCOMING_USER=admin
      - MAILDEV_INCOMING_PASS=mypass
      - MAILDEV_OUTGOING_USER=admin
      - MAILDEV_OUTGOING_PASS=mypass
    networks:
      - api_smtp_network
    ports:
      - "${MAIL_SMTP_PORT:-1026}:1025" # smtp server
      - "${MAIL_UI_PORT:-1081}:1080" # web ui

  api:
    container_name: ldcgc-api
    image: ldcgc-backend
    build:
      context: ./
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT_PROFILE=docker
      - DB_HOST=${DB_HOST:-ldcgc-db}
      - LOGGING_ROOT=${LOGGING_ROOT:-INFO}
      - LOGGING_SPRING_WEB=${LOGGING_SPRING_WEB:-INFO}
      - LOGGING_SPRING_BOOT=${LOGGING_SPRING_BOOT:-INFO}
      - LOGGING_API=${LOGGING_API:-INFO}
      - LOGGING_HIBERNATE=${LOGGING_HIBERNATE:-ERROR}
      - DB_START_MODE=${DB_START_MODE:-create-drop}
      - LOAD_INITIAL_DATA=${LOAD_INITIAL_DATA:-true}
      - CONSUMABLES_REGISTRATION_TEST_DATA=${TEST_DATA:-false}
      - TOOLS_REGISTRATION_TEST_DATA=${TEST_DATA:-false}
    depends_on:
      postgresql:
        condition: service_healthy
      maildev:
        condition: service_healthy
    networks:
      - api_db_network
      - api_smtp_network
    ports:
      - "8080:8080"
    restart: always

networks:
  api_db_network:
    driver: bridge
  api_smtp_network:
    driver: bridge

volumes:
  postgresql:
    name: ldcgc-db-vol
